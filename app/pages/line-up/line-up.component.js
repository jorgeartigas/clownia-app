"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var user_service_1 = require("./../../shared/user/user.service");
var core_1 = require("@angular/core");
var drawer_page_1 = require("../../shared/drawer/drawer.page");
var firebase = require("nativescript-plugin-firebase");
var Observable_1 = require("rxjs/Observable");
var LineUpComponent = /** @class */ (function (_super) {
    __extends(LineUpComponent, _super);
    function LineUpComponent(changeDetectorRef, userService) {
        var _this = _super.call(this, changeDetectorRef) || this;
        _this.changeDetectorRef = changeDetectorRef;
        _this.userService = userService;
        _this.artists = [];
        _this.myShedule = false;
        _this.artistsRef = firebase.firestore.collection("artists_preview").orderBy("name", "asc");
        _this.artistsBySetTime = firebase.firestore.collection("artists_preview").orderBy("set", "asc");
        // Own Schedule
        _this.localSchedule = [];
        _this.myScheduleArtists = [];
        // Artist by time
        _this.firstDay = [];
        _this.secondDay = [];
        _this.thirdDay = [];
        _this.fourthDay = [];
        // Artist by stages and times
        _this.mainStageSchedule = [];
        _this.plazaSchedule = [];
        _this.esplanadaSchedule = [];
        _this.carpaSchedule = [];
        // Stage toggles
        _this.mainStageToggle = false;
        _this.plazaToggle = false;
        _this.esplanadaToggle = false;
        _this.carpaToggle = false;
        return _this;
    }
    LineUpComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.artistsRef.get().then(function (snap) {
            snap.forEach(function (artist) {
                _this.artists.push(artist.data());
            });
        });
        this.fillSchedule();
        firebase.firestore.collection("user_schedules").doc(this.userService.userId).collection('artists').get().then(function (data) {
            data.forEach(function (element) {
                var date = new Date(element.data().set);
                element.data().set = date;
                _this.localSchedule.push(element.data());
            });
        }).then(function () {
            _this.localSchedule = _this.localSchedule.sort(function (a, b) { return new Date(a.set).getTime() - new Date(b.set).getTime(); });
        });
        //this.getMyScheduleObservable();
    };
    LineUpComponent.prototype.addToSchedule = function (artist) {
        var found = false;
        if (this.localSchedule.length > 0) {
            this.localSchedule.forEach(function (myArtist) {
                if (myArtist.id === artist.id) {
                    found = true;
                }
            });
        }
        if (!found) {
            this.localSchedule.push(artist);
            firebase.firestore.collection('user_schedules').doc(this.userService.userId).collection('artists').doc(artist.id).set(artist);
        }
    };
    LineUpComponent.prototype.removeFromSchedule = function (artist) {
        var _this = this;
        this.localSchedule.forEach(function (myArtist, index) {
            if (myArtist.id === artist.id) {
                _this.localSchedule.splice(index, 1);
                firebase.firestore.collection('user_schedules').doc(_this.userService.userId).collection('artists').doc(artist.id).delete();
            }
        });
    };
    LineUpComponent.prototype.getMyScheduleObservable = function () {
        var _this = this;
        this.myScheduleArtists$ = Observable_1.Observable.create(function (subscriber) {
            var scheduleRef = firebase.firestore.collection("user_schedules").doc(_this.userService.userId).collection('artists');
            scheduleRef.onSnapshot(function (snap) {
                _this.myScheduleArtists = [];
                snap.forEach(function (artist) { return _this.myScheduleArtists.push(artist.data()); });
                subscriber.next(_this.myScheduleArtists);
            });
        });
        this.myScheduleArtists$.subscribe();
    };
    LineUpComponent.prototype.ngOnDestroy = function () {
        console.log('destroy');
    };
    LineUpComponent.prototype.fillSchedule = function () {
        var _this = this;
        this.artistsBySetTime
            .get()
            .then(function (snap) {
            snap.forEach(function (doc) {
                if (doc.data().day == 'Dijous 28') {
                    _this.firstDay.push(doc.data());
                }
                else if (doc.data().day == 'Divendres 29') {
                    _this.secondDay.push(doc.data());
                }
                else if (doc.data().day == 'Dissabte 30') {
                    _this.thirdDay.push(doc.data());
                }
                else if (doc.data().day == 'Diumenge 1') {
                    _this.fourthDay.push(doc.data());
                }
                if (doc.data().stage === 'MAIN STAGE') {
                    _this.mainStageSchedule.push(doc.data());
                }
                else if (doc.data().stage === 'CARPA') {
                    _this.carpaSchedule.push(doc.data());
                }
                else if (doc.data().stage === 'PLAÃ‡A') {
                    _this.plazaSchedule.push(doc.data());
                }
                else {
                    _this.esplanadaSchedule.push(doc.data());
                }
            });
        }).then(function () {
            var oldDay = "";
            _this.mainStageSchedule.forEach(function (artist, index) {
                if (oldDay !== artist.day) {
                    _this.mainStageSchedule[index].firstDay = true;
                }
                else {
                    _this.mainStageSchedule[index].firstDay = false;
                }
                oldDay = artist.day;
            });
            var oldDay2 = "";
            _this.carpaSchedule.forEach(function (artist, index) {
                if (oldDay2 !== artist.day) {
                    _this.carpaSchedule[index].firstDay = true;
                }
                else {
                    _this.carpaSchedule[index].firstDay = false;
                }
                oldDay2 = artist.day;
            });
            var oldDay3 = "";
            _this.plazaSchedule.forEach(function (artist, index) {
                if (oldDay3 !== artist.day) {
                    _this.plazaSchedule[index].firstDay = true;
                }
                else {
                    _this.plazaSchedule[index].firstDay = false;
                }
                oldDay3 = artist.day;
            });
            var oldDay4 = "";
            _this.esplanadaSchedule.forEach(function (artist, index) {
                if (oldDay4 !== artist.day) {
                    _this.esplanadaSchedule[index].firstDay = true;
                }
                else {
                    _this.esplanadaSchedule[index].firstDay = false;
                }
                oldDay4 = artist.day;
            });
            var oldDay5 = "";
            _this.firstDay.forEach(function (artist, index) {
                if (oldDay5 !== artist.day) {
                    _this.firstDay[index].firstDay = true;
                }
                else {
                    _this.firstDay[index].firstDay = false;
                }
                oldDay5 = artist.day;
            });
            var oldDay6 = "";
            _this.secondDay.forEach(function (artist, index) {
                if (oldDay6 !== artist.day) {
                    _this.secondDay[index].firstDay = true;
                }
                else {
                    _this.secondDay[index].firstDay = false;
                }
                oldDay6 = artist.day;
            });
            var oldDay7 = "";
            _this.thirdDay.forEach(function (artist, index) {
                if (oldDay7 !== artist.day) {
                    _this.thirdDay[index].firstDay = true;
                }
                else {
                    _this.thirdDay[index].firstDay = false;
                }
                oldDay7 = artist.day;
            });
            var oldDay8 = "";
            _this.fourthDay.forEach(function (artist, index) {
                if (oldDay8 !== artist.day) {
                    _this.fourthDay[index].firstDay = true;
                }
                else {
                    _this.fourthDay[index].firstDay = false;
                }
                oldDay8 = artist.day;
            });
            _this.bySetTime = [].concat(_this.firstDay, _this.secondDay, _this.thirdDay, _this.fourthDay);
        });
    };
    LineUpComponent = __decorate([
        core_1.Component({
            selector: "line-up",
            moduleId: module.id,
            providers: [],
            templateUrl: "./line-up.component.html",
            styleUrls: ["./line-up-common.css"]
        }),
        __metadata("design:paramtypes", [core_1.ChangeDetectorRef,
            user_service_1.UserService])
    ], LineUpComponent);
    return LineUpComponent;
}(drawer_page_1.DrawerPage));
exports.LineUpComponent = LineUpComponent;
//# sourceMappingURL=data:application/json;base64,